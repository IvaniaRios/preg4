{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOEuk3wz05s59q/9K/+ycXK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","\n","# Montar Google Drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wa_gZO74o4X2","executionInfo":{"status":"ok","timestamp":1728211244233,"user_tz":240,"elapsed":42184,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"7a949aab-843c-4395-d645-d07aa1a4e303"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install pandas scikit-learn liac-arff\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"piEdaN7tp97L","executionInfo":{"status":"ok","timestamp":1728211250659,"user_tz":240,"elapsed":3746,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"128bfc9a-1404-46e2-fd46-a3a522b3d678"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n","Requirement already satisfied: liac-arff in /usr/local/lib/python3.10/dist-packages (2.5.0)\n","Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"]}]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"duAQbgJ3olad","executionInfo":{"status":"ok","timestamp":1728212012077,"user_tz":240,"elapsed":366,"user":{"displayName":"Alakir Meneses peres","userId":"09853550789562380167"}},"outputId":"dce3cac0-15d3-40ea-e944-4d3799267201"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Datos después de la imputación de valores faltantes con la media ---\n","         ph    Hardness       Solids  Chloramines     Sulfate  Organic_carbon  \\\n","0  7.080795  204.890456  20791.31898     7.300212  368.516441       10.379783   \n","1  3.716080  129.422921  18630.05786     6.635246  333.775777       15.180013   \n","2  8.099124  224.236259  19909.54173     9.275884  333.775777       16.868637   \n","3  8.316766  214.373394  22018.41744     8.059332  356.886136       18.436525   \n","4  9.092223  181.101509  17978.98634     6.546600  310.135738       11.558279   \n","\n","   Trihalomethanes  Turbidity  Check  \n","0        86.990970   2.963135    0.0  \n","1        56.329076   4.500656    0.0  \n","2        66.420093   3.055934    0.0  \n","3       100.341674   4.628771    0.0  \n","4        31.997993   4.075075    0.0  \n","\n","--- Resultado de One Hot Encoding (Columna 'Check') ---\n","    Check_0  Check_1\n","0       1.0      0.0\n","1       1.0      0.0\n","2       1.0      0.0\n","3       1.0      0.0\n","4       1.0      0.0\n","5       1.0      0.0\n","6       1.0      0.0\n","7       1.0      0.0\n","8       1.0      0.0\n","9       1.0      0.0\n","10      1.0      0.0\n","11      1.0      0.0\n","12      1.0      0.0\n","13      1.0      0.0\n","14      1.0      0.0\n","15      1.0      0.0\n","16      1.0      0.0\n","17      1.0      0.0\n","18      1.0      0.0\n","19      1.0      0.0\n","\n","--- Resultado de Label Encoding (Columna 'Check') ---\n","   Check  Check_encoded\n","0      0              0\n","1      0              0\n","2      0              0\n","3      0              0\n","4      0              0\n","5      0              0\n","6      0              0\n","7      0              0\n","8      0              0\n","9      0              0\n","10     0              0\n","11     0              0\n","12     0              0\n","13     0              0\n","14     0              0\n","15     0              0\n","16     0              0\n","17     0              0\n","18     0              0\n","19     0              0\n","\n","--- Resultado de la discretización (Columna 'ph') ---\n","          ph  ph_discretized\n","0   7.080795             2.0\n","1   3.716080             1.0\n","2   8.099124             2.0\n","3   8.316766             2.0\n","4   9.092223             3.0\n","5   5.584087             1.0\n","6  10.223862             3.0\n","7   8.635849             3.0\n","8   7.080795             2.0\n","9  11.180284             3.0\n","\n","--- Resultado de la normalización (MinMax Scaling) ---\n","         ph  Hardness    Solids  Chloramines   Sulfate  Organic_carbon  \\\n","0  0.505771  0.571139  0.336096     0.543891  0.680385        0.313402   \n","1  0.265434  0.297400  0.300611     0.491839  0.581699        0.497319   \n","2  0.578509  0.641311  0.321619     0.698543  0.581699        0.562017   \n","3  0.594055  0.605536  0.356244     0.603314  0.647347        0.622089   \n","4  0.649444  0.484851  0.289922     0.484900  0.514545        0.358555   \n","5  0.398863  0.511010  0.466746     0.563043  0.561537        0.237538   \n","6  0.730276  0.727768  0.466763     0.560580  0.751819        0.444050   \n","7  0.616846  0.565593  0.219208     0.329629  0.495155        0.389418   \n","8  0.505771  0.259553  0.229281     0.583340  0.396690        0.402531   \n","9  0.798592  0.652175  0.413152     0.682990  0.781300        0.602598   \n","\n","   Trihalomethanes  Turbidity  \n","0         0.699753   0.286091  \n","1         0.450999   0.576793  \n","2         0.532866   0.303637  \n","3         0.808065   0.601016  \n","4         0.253606   0.496327  \n","5         0.439550   0.209814  \n","6         0.680385   0.231233  \n","7         0.503483   0.558031  \n","8         0.431527   0.405562  \n","9         0.577945   0.552196  \n"]}],"source":["import pandas as pd\n","from scipy.io import arff\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder, KBinsDiscretizer, MinMaxScaler\n","\n","# 1. Cargar el archivo ARFF\n","ruta_arff = '/content/drive/My Drive/354/primer_parcial/water_quality.arff'\n","data = arff.loadarff(ruta_arff)\n","df = pd.DataFrame(data[0])\n","\n","# Convertir los valores faltantes representados como b'?' a NaN para que Pandas los reconozca\n","df.replace(b'?', pd.NA, inplace=True)\n","\n","# Convertir columnas numéricas a tipo float (ya que algunas pueden haber sido cargadas como objetos debido a los '?')\n","df = df.apply(pd.to_numeric, errors='coerce')\n","\n","# 2. Imputar valores faltantes con la media\n","# Aquí reemplazamos los valores faltantes en las columnas numéricas con la media de cada columna\n","df.fillna(df.mean(), inplace=True)\n","print(\"\\n--- Datos después de la imputación de valores faltantes con la media ---\")\n","print(df.head())\n","\n","# 3. One Hot Encoding para una columna categórica ('Check')\n","df['Check'] = df['Check'].astype(int)\n","one_hot_encoder = OneHotEncoder(sparse_output=False)\n","check_encoded = one_hot_encoder.fit_transform(df[['Check']])\n","\n","# Mostrar el resultado de One Hot Encoding\n","check_encoded_df = pd.DataFrame(check_encoded, columns=one_hot_encoder.get_feature_names_out(['Check']))\n","print(\"\\n--- Resultado de One Hot Encoding (Columna 'Check') ---\")\n","print(check_encoded_df.head(20))\n","\n","# 4. Label Encoding para la columna 'Check'\n","# Convierte valores categóricos en valores numéricos\n","df['Check'] = df['Check'].astype(str)  # Convertir a tipo string si es necesario\n","label_encoder = LabelEncoder()\n","df['Check_encoded'] = label_encoder.fit_transform(df['Check'])\n","\n","# Mostrar el resultado de Label Encoding\n","print(\"\\n--- Resultado de Label Encoding (Columna 'Check') ---\")\n","print(df[['Check', 'Check_encoded']].head(20))\n","\n","# 5. Discretización (dividir en intervalos o bins)\n","# Dividimos la columna 'ph' en 5 intervalos uniformes\n","discretizer = KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')\n","df['ph_discretized'] = discretizer.fit_transform(df[['ph']])\n","\n","# Mostrar el resultado de la discretización\n","print(\"\\n--- Resultado de la discretización (Columna 'ph') ---\")\n","print(df[['ph', 'ph_discretized']].head(10))\n","\n","# 6. Normalización de columnas numéricas (Min-Max Scaling)\n","# Normalizamos las columnas numéricas seleccionadas para que sus valores estén entre 0 y 1\n","num_cols = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Organic_carbon', 'Trihalomethanes', 'Turbidity']\n","scaler = MinMaxScaler()\n","df[num_cols] = scaler.fit_transform(df[num_cols])\n","\n","# Mostrar el resultado de la normalización\n","print(\"\\n--- Resultado de la normalización (MinMax Scaling) ---\")\n","print(df[num_cols].head(10))\n"]}]}